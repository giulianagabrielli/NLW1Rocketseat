{"ast":null,"code":"var _jsxFileName = \"/Users/giulianagabrielli/Documents/projetos-programacao/nlw1/web/src/pages/CreatePoint/index.tsx\";\nimport React, { useEffect, useState } from 'react'; //useEffect() recebe dois parâmetros, 1-qual função executar, 2-quando. ChangeEvent é a tipagem do evento.\n\nimport { Link, useHistory } from 'react-router-dom'; //useHistory permite navegar de um componente para o outro sem um botão\n\nimport { FiArrowLeft } from 'react-icons/fi';\nimport { Map, TileLayer, Marker } from 'react-leaflet'; //npm install leaflet react-leaflet --> lib de mapas npm install @types/react-leaflet -D. Precisa incluir um link no index.html\n\nimport api from '../../services/api'; //npm install axios --> biblioteca para integrar o react com o backend\n\nimport axios from 'axios'; //para usar as apis do IBGE\n\n//para se localizar no mapa\nimport './styles.css';\nimport logo from \"../../assets/logo.svg\";\n\nconst CreatePoint = () => {\n  const [items, setItems] = useState([]);\n  const [ufs, setUfs] = useState([]);\n  const [selectedUf, setSelectedUf] = useState('0');\n  const [cities, setCities] = useState([]);\n  const [selectedCity, setSelectedCity] = useState('0');\n  const [selectedPosition, setSelectedPosition] = useState([0, 0]);\n  const [inicialPosition, setInicialPosition] = useState([0, 0]);\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    whatsapp: ''\n  });\n  const [selectedItems, setSelectedItems] = useState([]);\n  const history = useHistory(); //sempre que cria um estado para array ou objeto, precisa manualmente informar o tipo da variável que vai ser armazenada ali\n\n  useEffect(() => {\n    api.get('items').then(response => {\n      setItems(response.data);\n    });\n  }, []); //para pegar a api do IBGE\n\n  useEffect(() => {\n    axios.get('https://servicodados.ibge.gov.br/api/v1/localidades/estados').then(response => {\n      const ufInitials = response.data.map(uf => uf.sigla);\n      setUfs(ufInitials);\n    });\n  }, []); //para pegar as cidades do IBGE sempre que a UF mudar\n\n  useEffect(() => {\n    if (selectedUf === '0') {\n      return;\n    }\n\n    axios.get(`https://servicodados.ibge.gov.br/api/v1/localidades/estados/${selectedUf}/municipios`).then(response => {\n      const cityNames = response.data.map(city => city.nome);\n      setCities(cityNames);\n    });\n  }, [selectedUf]); //para pegar a posição do usuário quando carrega a página\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      setInicialPosition([latitude, longitude]);\n    });\n  }, []); //função de selecionar a UF\n\n  function handleSelectedUf(event) {\n    const uf = event.target.value;\n    setSelectedUf(uf);\n  } //função de selecionar a Cidade\n\n\n  function handleSelectedCity(event) {\n    const city = event.target.value;\n    setSelectedCity(city);\n  } //função para selecionar localização no mapa\n\n\n  function handleMapClick(event) {\n    setSelectedPosition([event.latlng.lat, event.latlng.lng]);\n  } //função para guardar dados cadastrados\n\n\n  function handleInputChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormData({ ...formData,\n      [name]: value\n    });\n  } //função para selecionar os itens\n  //quando chama a função com parâmetro no html, ela precisa de uma arrow function\n\n\n  function handleSelectedItem(id) {\n    const alreadySelected = selectedItems.findIndex(item => item === id);\n\n    if (alreadySelected >= 0) {\n      const filteredItems = selectedItems.filter(item => item !== id);\n      setSelectedItems(filteredItems);\n    } else {\n      setSelectedItems([...selectedItems, id]);\n    }\n  } //função para enviar os dados para a Api\n\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n    const {\n      name,\n      email,\n      whatsapp\n    } = formData;\n    const uf = selectedUf;\n    const city = selectedCity;\n    const [latitude, longitude] = selectedPosition;\n    const items = selectedItems;\n    const data = {\n      name,\n      email,\n      whatsapp,\n      uf,\n      city,\n      latitude,\n      longitude,\n      items\n    };\n    await api.post('points', data);\n    alert('Ponto de coleta criado!');\n    history.push('/');\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"page-create-point\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: logo,\n    alt: \"Ecoleta\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 16\n    }\n  }), /*#__PURE__*/React.createElement(Link, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(FiArrowLeft, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 20\n    }\n  }), \"Voltar para home\")), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 16\n    }\n  }, \"Cadastro do \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 32\n    }\n  }), \" ponto de coleta\"), /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 20\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 24\n    }\n  }, \"Dados\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 20\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 24\n    }\n  }, \"Nome da entidade\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    id: \"name\",\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 24\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 20\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 29\n    }\n  }, \"E-mail\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"email\",\n    id: \"email\",\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"whatsapp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 29\n    }\n  }, \"Whatsapp\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"whatsapp\",\n    id: \"whatsapp\",\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 29\n    }\n  })))), /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 20\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 24\n    }\n  }, \"Endere\\xE7o\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 24\n    }\n  }, \"Selecione o endere\\xE7o no mapa\")), /*#__PURE__*/React.createElement(Map, {\n    center: [-23.5668582, -46.660879],\n    zoom: 15,\n    onClick: handleMapClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 20\n    }\n  }, /*#__PURE__*/React.createElement(TileLayer, {\n    attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n    url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Marker, {\n    position: selectedPosition,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 20\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 24\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"uf\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 28\n    }\n  }, \"Estado (UF)\"), /*#__PURE__*/React.createElement(\"select\", {\n    name: \"uf\",\n    id: \"uf\",\n    value: selectedUf,\n    onChange: handleSelectedUf,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 28\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 32\n    }\n  }, \"Selecione uma UF\"), ufs.map(uf => /*#__PURE__*/React.createElement(\"option\", {\n    key: uf,\n    value: uf,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 36\n    }\n  }, uf)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 24\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"city\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 28\n    }\n  }, \"Cidade\"), /*#__PURE__*/React.createElement(\"select\", {\n    name: \"city\",\n    id: \"city\",\n    value: selectedCity,\n    onChange: handleSelectedCity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 28\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 32\n    }\n  }, \"Selecione uma Cidade\"), cities.map(city => /*#__PURE__*/React.createElement(\"option\", {\n    key: city,\n    value: city,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 36\n    }\n  }, city)))))), /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 20\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 24\n    }\n  }, \"\\xCDtens de coleta\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 24\n    }\n  }, \"Selecione o endere\\xE7o no mapa\")), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"items-grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 20\n    }\n  }, items.map(item => /*#__PURE__*/React.createElement(\"li\", {\n    key: item.id,\n    onClick: () => handleSelectedItem(item.id),\n    className: selectedItems.includes(item.id) ? 'selected' : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: item.image_url,\n    alt: item.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 33\n    }\n  }, item.title))))), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 16\n    }\n  }, \"Cadastrar ponto de coleta\")));\n};\n\nexport default CreatePoint;","map":{"version":3,"sources":["/Users/giulianagabrielli/Documents/projetos-programacao/nlw1/web/src/pages/CreatePoint/index.tsx"],"names":["React","useEffect","useState","Link","useHistory","FiArrowLeft","Map","TileLayer","Marker","api","axios","CreatePoint","items","setItems","ufs","setUfs","selectedUf","setSelectedUf","cities","setCities","selectedCity","setSelectedCity","selectedPosition","setSelectedPosition","inicialPosition","setInicialPosition","formData","setFormData","name","email","whatsapp","selectedItems","setSelectedItems","history","get","then","response","data","ufInitials","map","uf","sigla","cityNames","city","nome","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","handleSelectedUf","event","target","value","handleSelectedCity","handleMapClick","latlng","lat","lng","handleInputChange","handleSelectedItem","id","alreadySelected","findIndex","item","filteredItems","filter","handleSubmit","preventDefault","post","alert","push","logo","includes","image_url","title"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, ChangeEvent, FormEvent } from 'react'; //useEffect() recebe dois parâmetros, 1-qual função executar, 2-quando. ChangeEvent é a tipagem do evento.\nimport { Link, useHistory } from 'react-router-dom'; //useHistory permite navegar de um componente para o outro sem um botão\nimport { FiArrowLeft } from 'react-icons/fi'\nimport { Map, TileLayer, Marker } from 'react-leaflet'; //npm install leaflet react-leaflet --> lib de mapas npm install @types/react-leaflet -D. Precisa incluir um link no index.html\nimport api from '../../services/api'; //npm install axios --> biblioteca para integrar o react com o backend\nimport axios from 'axios'; //para usar as apis do IBGE\nimport { LeafletMouseEvent } from 'leaflet'; //para se localizar no mapa\n\nimport './styles.css';\n\nimport logo from '../../assets/logo.svg';\n\ninterface Item {\n    id: number;\n    title: string;\n    image_url: string;\n}\n\ninterface IBGEUF {\n    sigla: string;\n}\n\ninterface IBGECity {\n    nome: string;\n}\n\nconst CreatePoint = () => {\n\n    const [items, setItems] = useState<Item[]>([]); \n\n    const [ufs, setUfs] = useState<string[]>([]); \n    const [selectedUf, setSelectedUf] = useState('0');\n\n    const [cities, setCities] = useState<string[]>([]);\n    const [selectedCity, setSelectedCity] = useState('0');\n\n    const [selectedPosition, setSelectedPosition] = useState<[number, number]>([0, 0]);\n    const [inicialPosition, setInicialPosition] = useState<[number, number]>([0, 0]);\n\n    const [formData, setFormData] = useState({\n        name: '',\n        email: '', \n        whatsapp: ''\n    })\n\n    const [selectedItems, setSelectedItems] = useState<number[]>([]);\n\n    const history = useHistory();\n\n    //sempre que cria um estado para array ou objeto, precisa manualmente informar o tipo da variável que vai ser armazenada ali\n    useEffect(()=>{\n        api.get('items').then(response => {\n            setItems(response.data);\n        })\n    }, []);\n\n    //para pegar a api do IBGE\n    useEffect(()=>{\n        axios\n            .get<IBGEUF[]>('https://servicodados.ibge.gov.br/api/v1/localidades/estados')\n            .then(response => {\n                const ufInitials = response.data.map(uf => uf.sigla);\n                setUfs(ufInitials);\n             })\n    }, []);\n\n    //para pegar as cidades do IBGE sempre que a UF mudar\n    useEffect(()=>{\n        if(selectedUf ==='0') {\n            return;\n        }\n\n        axios\n            .get<IBGECity[]>(`https://servicodados.ibge.gov.br/api/v1/localidades/estados/${selectedUf}/municipios`)\n            .then(response => {\n                const cityNames = response.data.map(city => city.nome);\n                setCities(cityNames);\n            })\n\n    }, [selectedUf]);\n\n    //para pegar a posição do usuário quando carrega a página\n    useEffect(()=>{\n        navigator.geolocation.getCurrentPosition(position => {\n            const { latitude, longitude } = position.coords;\n            \n        setInicialPosition([ latitude, longitude ]);\n        })\n    }, []);\n\n    //função de selecionar a UF\n    function handleSelectedUf(event: ChangeEvent<HTMLSelectElement>){\n        const uf = event.target.value;\n        setSelectedUf(uf);\n    }\n\n    //função de selecionar a Cidade\n    function handleSelectedCity(event: ChangeEvent<HTMLSelectElement>){\n        const city = event.target.value;\n        setSelectedCity(city);\n    }\n\n    //função para selecionar localização no mapa\n    function handleMapClick(event: LeafletMouseEvent){\n        setSelectedPosition([\n            event.latlng.lat,\n            event.latlng.lng\n        ])\n    }\n\n    //função para guardar dados cadastrados\n    function handleInputChange(event: ChangeEvent<HTMLInputElement>){\n        const { name, value } = event.target;\n\n        setFormData({...formData, [name]: value})\n    }\n\n    //função para selecionar os itens\n    //quando chama a função com parâmetro no html, ela precisa de uma arrow function\n    function handleSelectedItem(id: number){\n        const alreadySelected = selectedItems.findIndex(item => item === id);\n\n        if(alreadySelected >= 0){\n\n            const filteredItems = selectedItems.filter(item => item !== id);\n\n            setSelectedItems(filteredItems);\n\n        } else {\n\n            setSelectedItems([...selectedItems, id])\n        }\n    }\n\n    //função para enviar os dados para a Api\n    async function handleSubmit(event: FormEvent){\n        event.preventDefault();\n\n        const { name, email, whatsapp } = formData;\n        const uf = selectedUf;\n        const city = selectedCity;\n        const [latitude, longitude] = selectedPosition;\n        const items = selectedItems;\n\n        const data = {\n            name, \n            email, \n            whatsapp,\n            uf,\n            city,\n            latitude,\n            longitude,\n            items\n        };\n\n        await api.post('points', data);\n\n        alert('Ponto de coleta criado!');\n\n        history.push('/')\n    }\n\n    return (\n       <div id=\"page-create-point\">\n           <header>\n               <img src={logo} alt=\"Ecoleta\"/>\n\n               <Link to=\"/\">\n                   <FiArrowLeft />\n                   Voltar para home\n               </Link>\n           </header>\n\n           <form onSubmit={handleSubmit}>\n               <h1>Cadastro do <br /> ponto de coleta</h1>\n\n               <fieldset>\n                   <legend>\n                       <h2>Dados</h2>\n                   </legend>\n\n                   <div className=\"field\">\n                       <label htmlFor=\"name\">Nome da entidade</label>\n                       <input \n                        type=\"text\"\n                        name=\"name\"\n                        id=\"name\"\n                        onChange={handleInputChange}\n                       />\n                   </div>\n\n                   <div className=\"field-group\">\n                        <div className=\"field\">\n                            <label htmlFor=\"email\">E-mail</label>\n                            <input \n                                type=\"text\"\n                                name=\"email\"\n                                id=\"email\"\n                                onChange={handleInputChange}\n                            />\n                        </div>\n                        <div className=\"field\">\n                            <label htmlFor=\"whatsapp\">Whatsapp</label>\n                            <input \n                                type=\"text\"\n                                name=\"whatsapp\"\n                                id=\"whatsapp\"\n                                onChange={handleInputChange}\n                            />\n                        </div>\n                   </div>\n               </fieldset>\n\n               <fieldset>\n                   <legend>\n                       <h2>Endereço</h2>\n                       <span>Selecione o endereço no mapa</span>\n                   </legend>\n\n                   <Map center={[-23.5668582, -46.660879]} zoom={15} onClick={handleMapClick}>\n                        <TileLayer\n                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                        />\n\n                        <Marker position={selectedPosition} />\n                   </Map>\n\n                   <div className=\"field-group\">\n                       <div className=\"field\">\n                           <label htmlFor=\"uf\">Estado (UF)</label>\n                           <select \n                            name=\"uf\" \n                            id=\"uf\" \n                            value={selectedUf} \n                            onChange={handleSelectedUf}\n                           >\n                               <option value=\"0\">Selecione uma UF</option>\n                               {ufs.map(uf => (\n                                   <option key={uf} value={uf}>{uf}</option>\n                               ))}\n                           </select>\n                       </div>\n                       <div className=\"field\">\n                           <label htmlFor=\"city\">Cidade</label>\n                           <select \n                            name=\"city\" \n                            id=\"city\"\n                            value={selectedCity}\n                            onChange={handleSelectedCity}\n                           >\n                               <option value=\"0\">Selecione uma Cidade</option>\n                               {cities.map(city => (\n                                   <option key={city} value={city}>{city}</option>\n                               ))}\n                           </select>\n                       </div>\n                   </div>\n               </fieldset>\n\n               <fieldset>\n                   <legend>\n                       <h2>Ítens de coleta</h2>\n                       <span>Selecione o endereço no mapa</span>\n                   </legend>\n\n                   <ul className=\"items-grid\">\n                       {items.map(item => (\n                            <li \n                                key={item.id} \n                                onClick={() => \n                                handleSelectedItem(item.id)}\n                                className={selectedItems.includes(item.id) ? 'selected' : ''}\n                            >\n                                <img src={item.image_url} alt={item.title}/>\n                                <span>{item.title}</span>\n                            </li>  \n                       ))}\n                   </ul>\n               </fieldset>\n\n               <button type=\"submit\">Cadastrar ponto de coleta</button>\n           </form>\n       </div>\n    )\n}\n\nexport default CreatePoint;"]},"metadata":{},"sourceType":"module"}